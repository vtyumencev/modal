{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import {createNanoEvents, Emitter} from \"nanoevents\";\n\nexport interface SXModalOptions {\n    closable?: boolean,\n    onOpening?: (modal: HTMLElement) => Promise<void>,\n    onOpen?: (modal: HTMLElement) => void,\n    onClosing?: (modal: HTMLElement) => Promise<void>,\n    onClose?: (modal: HTMLElement) => void,\n    transitionDuration?: number,\n}\n\nexport interface BindEvent {\n    el: Element,\n    name: string,\n    callback: () => {}\n}\n\nexport interface ModalItem {\n    previousActiveElement: HTMLElement,\n    el: HTMLElement,\n    options: SXModalOptions,\n    events: BindEvent[]\n}\n\nexport interface HookOptions {\n    modalId: string,\n    options: SXModalOptions\n}\n\nexport interface IModal {\n    modals: ModalItem[],\n    init(querySelectorOrId: HTMLElement|string, options?: SXModalOptions): void,\n    emitter: Emitter\n}\n\nexport interface IModule {\n    modalInit(): void,\n    modalDestroy(): void,\n}\n\nexport interface IModuleConstructable {\n    new(modalActions: IModal): IModule,\n}\n\nexport interface EventParams {\n    modal: ModalItem,\n    callback: () => void\n}\n\nexport interface Events {\n    dialogDestroying: (params: EventParams) => void,\n    dialogDestroy: (modal: ModalItem) => void\n}\n\nclass Modal implements IModal {\n\n    protected isInitialized = false;\n\n    protected BASE_Z_INDEX = 100;\n    protected TAB_QUERY_SELECTORS = '' +\n        'a[href]:not([disabled]),' +\n        'button:not([disabled]),' +\n        'textarea:not([disabled]),' +\n        'input[type=\"submit\"]:not([disabled]),' +\n        'input[type=\"text\"]:not([disabled]),' +\n        'input[type=\"radio\"]:not([disabled]),' +\n        'input[type=\"checkbox\"]:not([disabled]),' +\n        'select:not([disabled])';\n    protected modalsEnabled = false;\n    protected hookOptionsList: HookOptions[] = [];\n    protected connectedModules: IModule[] = [];\n    protected keyDownEvent: () => void;\n\n    public modals: ModalItem[] = [];\n    public emitter: Emitter;\n\n    constructor() {\n        this.emitter = createNanoEvents<Events>();\n        this.updateScrollbarBuffer();\n    }\n\n    on<E extends keyof Events>(event: E, callback: Events[E]) {\n        return this.emitter.on(event, callback)\n    }\n\n    // https://stackoverflow.com/questions/13382516/getting-scroll-bar-width-using-javascript\n    protected updateScrollbarBuffer () {\n\n        // Creating invisible container\n        const outer = document.createElement('div');\n        outer.style.visibility = 'hidden';\n        outer.style.overflow = 'scroll'; // forcing scrollbar to appear\n        //outer.style.msOverflowStyle = 'scrollbar'; // needed for WinJS apps\n        document.body.appendChild(outer);\n\n        // Creating inner element and placing it in the container\n        const inner = document.createElement('div');\n        outer.appendChild(inner);\n\n        // Calculating difference between container's full width and the child width\n        const scrollbarWidth = (outer.offsetWidth - inner.offsetWidth);\n\n        // Removing temporary elements from the DOM\n        outer.parentNode.removeChild(outer);\n\n        document.body.style.setProperty('--scroll-bar-buffer', scrollbarWidth + 'px');\n    }\n\n    protected async openModal(modalEl: HTMLElement, options: SXModalOptions = {}): Promise<void> {\n\n        // Prevent initializing already initialized modals\n        for (const modal of this.modals) {\n            if (modal.el === modalEl) {\n                return;\n            }\n        }\n\n        const defaultOptions: SXModalOptions = {\n            closable: true,\n            onOpening: null,\n            onOpen: null,\n            onClosing: null,\n            onClose: null,\n            transitionDuration: 300,\n        }\n\n        let alteredOptions = {...defaultOptions};\n\n        for (const hook of this.hookOptionsList) {\n            if (hook.modalId === modalEl.getAttribute('id')) {\n                alteredOptions = {...alteredOptions, ...hook.options};\n            }\n        }\n\n        alteredOptions = {...alteredOptions, ...options};\n\n        modalEl.style.zIndex = (this.BASE_Z_INDEX + this.modals.length).toString();\n        modalEl.setAttribute(\"tabindex\", \"-1\");\n        modalEl.classList.add('showing');\n        modalEl.classList.add('shown');\n\n        if (modalEl.querySelector('.sx-modal-dialog').clientHeight > window.innerHeight) {\n            modalEl.classList.add('scrollable');\n        } else {\n            modalEl.classList.remove('scrollable');\n        }\n\n        if (alteredOptions.onOpening) {\n\n            let isFullFilled = false;\n\n            setTimeout(() => {\n                if (! isFullFilled) {\n                    modalEl.classList.add('loading');\n                }\n            }, 20);\n\n            await alteredOptions.onOpening(modalEl).catch(() => {\n                modalEl.classList.remove('loading');\n                modalEl.classList.remove('shown');\n                modalEl.classList.remove('showing');\n                throw new Error('Impossible to create a modal window with an opening callback: ' + alteredOptions.onOpening);\n            })\n\n            isFullFilled = true;\n\n            modalEl.classList.remove('loading');\n        }\n\n        void modalEl.offsetWidth;\n\n        modalEl.classList.add('visible');\n\n        setTimeout(() => {\n            modalEl.classList.add('released');\n            modalEl.classList.remove('showing');\n            (modalEl.querySelectorAll(this.TAB_QUERY_SELECTORS)[0] as HTMLElement)?.focus();\n        }, alteredOptions.transitionDuration + 100);\n\n        const events: BindEvent[] = [];\n\n        modalEl.querySelectorAll('.action-close').forEach((closeEl) => {\n            events.push({\n                el: closeEl,\n                name: 'click',\n                callback: this.destroyModalClickEvent.bind(this)\n            });\n        });\n\n        events.push({\n            el: modalEl,\n            name: 'click',\n            callback: this.onDocumentClick.bind(this)\n        });\n\n        events.push({\n            el: modalEl,\n            name: 'keydown',\n            callback: this.onKeyEvent.bind(this)\n        });\n\n        for (const event of events) {\n            event.el.addEventListener(event.name, event.callback);\n        }\n\n        this.modals.push({\n            previousActiveElement: (document.activeElement as HTMLElement),\n            el: modalEl,\n            options: alteredOptions,\n            events: events\n        });\n\n        this.updateModals();\n    }\n\n    protected destroyModal(modal: ModalItem) {\n\n        const wrapper: EventParams = {\n            modal: modal,\n            callback: () => {\n                const modalEl = modal.el;\n                modalEl.classList.add('hiding');\n                modalEl.classList.remove('visible');\n                modalEl.classList.remove('released');\n                setTimeout(() => {\n                    modalEl.classList.remove('shown');\n                    modalEl.classList.remove('hiding');\n                    modal.previousActiveElement?.focus();\n                    this.updateModals();\n                }, modal.options.transitionDuration);\n\n                for (const event of modal.events) {\n                    event.el.removeEventListener(event.name, event.callback);\n                }\n\n                if (modal.options.onClose) {\n                    modal.options.onClose(modalEl);\n                }\n\n                this.modals = this.modals.filter((modal) => {\n                    return modalEl !== modal.el;\n                });\n            }\n        }\n\n        this.emitter.emit('dialogDestroying', wrapper);\n\n        wrapper.callback();\n    }\n\n    protected onDocumentClick(e: Event) {\n        if (! (e.target as HTMLElement).closest('.sx-modal')) {\n            return;\n        }\n        if ((e.target as HTMLElement).closest('.sx-modal-dialog__container')) {\n            return;\n        }\n\n        if (this.modals[this.modals.length - 1].options.closable === true) {\n            this.destroyModal(this.modals[this.modals.length - 1]);\n        }\n    }\n\n    protected onKeyEvent(e: KeyboardEvent) {\n        if (e.key === 'Escape' && this.modals[this.modals.length - 1].options.closable === true) {\n            this.destroyModal(this.modals[this.modals.length - 1]);\n            return;\n        }\n\n        const focusableEls = this.modals[this.modals.length - 1].el.querySelectorAll(this.TAB_QUERY_SELECTORS);\n\n        const firstFocusableEl = (focusableEls[0] as HTMLElement);\n        const lastFocusableEl = (focusableEls[focusableEls.length - 1] as HTMLElement);\n\n        const isTabPressed = (e.key === 'Tab');\n        if (! isTabPressed) {\n            return;\n        }\n\n        if (! this.modals[this.modals.length - 1].el.contains(document.activeElement)) {\n            if (firstFocusableEl) {\n                firstFocusableEl.focus();\n            }\n            e.preventDefault();\n        }\n\n        else if (e.shiftKey) /* shift + tab */ {\n            if (document.activeElement === firstFocusableEl) {\n                lastFocusableEl.focus();\n                e.preventDefault();\n            }\n        } else /* tab */ {\n            if (document.activeElement === lastFocusableEl) {\n                firstFocusableEl.focus();\n                e.preventDefault();\n            }\n        }\n\n    }\n\n    protected destroyModalClickEvent(e: Event) {\n        const modalEl = (e.target as HTMLElement).closest('.sx-modal');\n\n        const modal = this.modals.find((modal: ModalItem): boolean => {\n            return modalEl === modal.el;\n        });\n\n        if (! modal) {\n            return;\n        }\n\n        this.destroyModal(modal);\n    }\n\n    protected updateModals() {\n        if (this.modals.length > 0) {\n            if (this.modalsEnabled) {\n                return;\n            }\n            this.modalsEnabled = true;\n            document.body.classList.add('has-active-sx-modal');\n        } else {\n            if (! this.modalsEnabled) {\n                return;\n            }\n            this.modalsEnabled = false;\n            document.body.classList.remove('has-active-sx-modal');\n        }\n    }\n\n    start(modules?: IModuleConstructable[]) {\n        if (this.isInitialized) {\n            console.warn(\"SXModal: Already initialized\")\n            return this;\n        }\n\n        this.keyDownEvent = this.onKeyEvent.bind(this);\n\n        for(const module of modules ?? []) {\n            const moduleInstance = new module(this);\n            moduleInstance.modalInit();\n            this.connectedModules.push(moduleInstance);\n        }\n\n        this.isInitialized = true;\n    }\n\n    addOptionsHook(modalId: string, options: SXModalOptions) {\n        this.hookOptionsList.push({modalId, options});\n    }\n\n    init(querySelectorOrId: HTMLElement|string, options: SXModalOptions = {}) {\n        let modalEl: HTMLElement;\n\n        if (querySelectorOrId instanceof HTMLElement) {\n            modalEl = querySelectorOrId;\n        } else if (typeof querySelectorOrId === 'string') {\n            modalEl = document.querySelector(querySelectorOrId);\n        }\n\n        if (! modalEl) {\n            return;\n        }\n\n        void this.openModal(modalEl, options);\n    }\n\n    destroy(querySelectorOrId: HTMLElement|string) {\n        let modalEl: HTMLElement;\n\n        if (querySelectorOrId instanceof HTMLElement) {\n            modalEl = querySelectorOrId;\n        } else if (typeof querySelectorOrId === 'string') {\n            modalEl = document.querySelector(querySelectorOrId);\n        }\n\n        if (! modalEl) {\n            return;\n        }\n\n        for (const modal of this.modals) {\n            if (modal.el === modalEl) {\n                void this.destroyModal(modal);\n            }\n        }\n\n    }\n}\nexport default new Modal();"],"mappings":"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","names":["modal"]}